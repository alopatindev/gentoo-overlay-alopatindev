diff -ur portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/libpsi/tools/spellchecker/aspellchecker.cpp psi-0.15_pre20110526.hacked/src/libpsi/tools/spellchecker/aspellchecker.cpp
--- portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/libpsi/tools/spellchecker/aspellchecker.cpp	2011-05-26 17:08:37.000000000 +0400
+++ psi-0.15_pre20110526.hacked/src/libpsi/tools/spellchecker/aspellchecker.cpp	2011-07-24 09:57:59.335805268 +0400
@@ -34,8 +34,6 @@
 
 ASpellChecker::ASpellChecker()
 {
-	config_ = NULL;
-	speller_ = NULL;
 	config_ = new_aspell_config();
 	aspell_config_replace(config_, "encoding", "utf-8");
 #ifdef Q_WS_WIN
@@ -43,15 +41,27 @@
 	aspell_config_replace(config_, "data-dir", QString("%1/aspell/data").arg(QCoreApplication::applicationDirPath()));
 	aspell_config_replace(config_, "dict-dir", QString("%1/aspell/dict").arg(QCoreApplication::applicationDirPath()));
 #endif
-	AspellCanHaveError* ret = new_aspell_speller(config_);
-	if (aspell_error_number(ret) == 0) {
-		speller_ = to_aspell_speller(ret);
+
+	const char* lang = aspell_config_retrieve(config_, "lang");
+	QList<QString> langs;
+
+	if (lang) {
+		langs.append(lang);
+		setActiveLanguages(langs);
 	}
 	else {
-		qWarning() << QString("Aspell error: %1").arg(aspell_error_message(ret));
+		qWarning() << QString("Aspell error: no default language found");
 	}
 }
 
+void ASpellChecker::clearSpellers()
+{
+	for (ASpellers::iterator it = spellers_.begin(); it != spellers_.end(); ++it)
+		delete_aspell_speller(*it);
+
+       spellers_.clear();
+}
+
 ASpellChecker::~ASpellChecker()
 {
 	if(config_) {
@@ -59,45 +69,58 @@
 		config_ = NULL;
 	}
 
-	if(speller_) {
-		delete_aspell_speller(speller_);
-		speller_ = NULL;
-	}
+	clearSpellers();
 }
 
 bool ASpellChecker::isCorrect(const QString& word)
 {
-	if(speller_) {
-		int correct = aspell_speller_check(speller_, word.toUtf8().constData(), -1);
-		return (correct != 0);
+	if (!spellers_.empty()) {
+		for (ASpellers::iterator it = spellers_.begin(); it != spellers_.end(); ++it) {
+			if (aspell_speller_check(*it, word.toUtf8().constData(), -1) != 0)
+				return true;
+		}
+		return false;
 	}
 	return true;
 }
 
-QList<QString> ASpellChecker::suggestions(const QString& word)
+QList<QString> ASpellChecker::suggestions(const QString& word, const QString& lang, unsigned max_sugs)
 {
 	QList<QString> words;
-	if (speller_) {
-		const AspellWordList* list = aspell_speller_suggest(speller_, word.toUtf8(), -1); 
-		AspellStringEnumeration* elements = aspell_word_list_elements(list);
-		const char *c_word;
-		while ((c_word = aspell_string_enumeration_next(elements)) != NULL) {
-			words += QString::fromUtf8(c_word);
+
+	if (!spellers_.empty()) {
+		for (ASpellers::iterator it = spellers_.begin(); it != spellers_.end(); ++it) {
+			AspellConfig* conf = aspell_speller_config(*it);
+			if (lang == aspell_config_retrieve(conf, "lang")) {
+				const AspellWordList* list = aspell_speller_suggest(*it, word.toUtf8(), -1); 
+				AspellStringEnumeration* elements = aspell_word_list_elements(list);
+				const char *c_word;
+				unsigned count = 0;
+				while ((c_word = aspell_string_enumeration_next(elements)) != NULL && (!max_sugs || count < max_sugs)) {
+					words += QString::fromUtf8(c_word);
+					++count;
+				}
+				delete_aspell_string_enumeration(elements);
+			}
 		}
-		delete_aspell_string_enumeration(elements);
 	}
 	return words;
 }
 
-bool ASpellChecker::add(const QString& word)
+bool ASpellChecker::add(const QString& word, const QString& lang)
 {
 	bool result = false;
-	if (config_ && speller_) {
+	if (config_ && !spellers_.empty()) {
 		QString trimmed_word = word.trimmed();
 		if(!word.isEmpty()) {
-			aspell_speller_add_to_personal(speller_, trimmed_word.toUtf8(), trimmed_word.toUtf8().length());
-			aspell_speller_save_all_word_lists(speller_);
-			result = true;
+			for (ASpellers::iterator it = spellers_.begin(); it != spellers_.end(); ++it) {
+				AspellConfig* conf = aspell_speller_config(*it);
+				if (lang == aspell_config_retrieve(conf, "lang")) {
+					aspell_speller_add_to_personal(*it, trimmed_word.toUtf8(), trimmed_word.toUtf8().length());
+					aspell_speller_save_all_word_lists(*it);
+					result = true;
+				}
+			}
 		}
 	}
 	return result;
@@ -105,10 +128,55 @@
 
 bool ASpellChecker::available() const
 {
-	return (speller_ != NULL);
+	return ! getAllLanguages().isEmpty();
 }
 
 bool ASpellChecker::writable() const
 {
-	return false;
+	return true;
+}
+
+QList<QString> ASpellChecker::getAllLanguages() const
+{
+	QList<QString> langs;
+
+	AspellDictInfoList* dict_info_list = get_aspell_dict_info_list(config_);
+
+	if (!aspell_dict_info_list_empty(dict_info_list)) {
+
+		AspellDictInfoEnumeration* dict_info_enum = aspell_dict_info_list_elements(dict_info_list);
+
+		while (!aspell_dict_info_enumeration_at_end(dict_info_enum)) {
+			const AspellDictInfo* dict_info = aspell_dict_info_enumeration_next(dict_info_enum);
+			QString lang(dict_info -> code);
+			if (lang.contains('_'))
+				lang.truncate(lang.indexOf('_'));
+			if (!langs.contains(lang)) {
+				langs.append(lang);
+			}
+		}
+
+		delete_aspell_dict_info_enumeration(dict_info_enum);
+	}
+
+	return langs;
+}
+
+void ASpellChecker::setActiveLanguages(const QList<QString>& langs)
+{
+	clearSpellers();
+
+	for (QList<QString>::const_iterator it = langs.begin(); it != langs.end(); ++it)
+	{
+		AspellConfig* conf = aspell_config_clone(config_);
+		aspell_config_replace(conf, "lang", *it);
+		AspellCanHaveError* ret = new_aspell_speller(conf);
+		if (aspell_error_number(ret) == 0) {
+			spellers_.append(to_aspell_speller(ret));
+		}
+		else {
+			qWarning(QString("Aspell error: %1").arg(aspell_error_message(ret)).toAscii());
+		}
+		delete_aspell_config(conf);
+	}
 }
diff -ur portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/libpsi/tools/spellchecker/aspellchecker.h psi-0.15_pre20110526.hacked/src/libpsi/tools/spellchecker/aspellchecker.h
--- portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/libpsi/tools/spellchecker/aspellchecker.h	2011-05-26 17:08:37.000000000 +0400
+++ psi-0.15_pre20110526.hacked/src/libpsi/tools/spellchecker/aspellchecker.h	2011-07-24 09:57:59.359804972 +0400
@@ -40,15 +40,21 @@
 public:
 	ASpellChecker();
 	~ASpellChecker();
-	virtual QList<QString> suggestions(const QString&);
+	virtual QList<QString> suggestions(const QString&, const QString& lang, unsigned max_sugs);
 	virtual bool isCorrect(const QString&);
-	virtual bool add(const QString&);
+	virtual bool add(const QString& word, const QString& lang);
 	virtual bool available() const;
 	virtual bool writable() const;
+	virtual QList<QString> getAllLanguages() const;
+	virtual void setActiveLanguages(const QList<QString>&);
 
 private:
+	typedef QList<AspellSpeller*> ASpellers;
 	AspellConfig* config_;
-	AspellSpeller* speller_;
+	ASpellers spellers_;
+
+private:
+	void clearSpellers();
 };
 
 #endif
diff -ur portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/libpsi/tools/spellchecker/macspellchecker.h psi-0.15_pre20110526.hacked/src/libpsi/tools/spellchecker/macspellchecker.h
--- portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/libpsi/tools/spellchecker/macspellchecker.h	2011-05-26 17:08:37.000000000 +0400
+++ psi-0.15_pre20110526.hacked/src/libpsi/tools/spellchecker/macspellchecker.h	2011-07-24 09:57:59.352805060 +0400
@@ -37,9 +37,9 @@
 public:
 	MacSpellChecker();
 	~MacSpellChecker();
-	virtual QList<QString> suggestions(const QString&);
+	virtual QList<QString> suggestions(const QString&, const QString&, unsigned);
 	virtual bool isCorrect(const QString&);
-	virtual bool add(const QString&);
+	virtual bool add(const QString&, const QString&);
 	virtual bool available() const;
 	virtual bool writable() const;
 };
diff -ur portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/libpsi/tools/spellchecker/macspellchecker.mm psi-0.15_pre20110526.hacked/src/libpsi/tools/spellchecker/macspellchecker.mm
--- portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/libpsi/tools/spellchecker/macspellchecker.mm	2011-05-26 17:08:37.000000000 +0400
+++ psi-0.15_pre20110526.hacked/src/libpsi/tools/spellchecker/macspellchecker.mm	2011-07-24 09:57:59.343805172 +0400
@@ -44,7 +44,7 @@
 	return (range.length == 0);
 }
 
-QList<QString> MacSpellChecker::suggestions(const QString& word)
+QList<QString> MacSpellChecker::suggestions(const QString& word, const QString& lang, unsigned max_sugs)
 {
 	QList<QString> s;
 
@@ -57,7 +57,7 @@
 	return s;
 }
 
-bool MacSpellChecker::add(const QString& word)
+bool MacSpellChecker::add(const QString& word, const QString& lang)
 {
 	return false;
 }
diff -ur portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/libpsi/tools/spellchecker/spellchecker.cpp psi-0.15_pre20110526.hacked/src/libpsi/tools/spellchecker/spellchecker.cpp
--- portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/libpsi/tools/spellchecker/spellchecker.cpp	2011-05-26 17:08:37.000000000 +0400
+++ psi-0.15_pre20110526.hacked/src/libpsi/tools/spellchecker/spellchecker.cpp	2011-07-24 09:57:59.316805509 +0400
@@ -76,14 +76,23 @@
 	return true;
 }
 
-QList<QString> SpellChecker::suggestions(const QString&)
+QList<QString> SpellChecker::suggestions(const QString&, const QString&, unsigned)
 {
 	return QList<QString>();
 }
 
-bool SpellChecker::add(const QString&)
+bool SpellChecker::add(const QString&, const QString&)
 {
 	return false;
 }
 
+QList<QString> SpellChecker::getAllLanguages() const
+{
+	return QList<QString>();
+}
+
+void SpellChecker::setActiveLanguages(const QList<QString>&)
+{
+}
+
 SpellChecker* SpellChecker::instance_ = NULL;
diff -ur portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/libpsi/tools/spellchecker/spellchecker.h psi-0.15_pre20110526.hacked/src/libpsi/tools/spellchecker/spellchecker.h
--- portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/libpsi/tools/spellchecker/spellchecker.h	2011-05-26 17:08:37.000000000 +0400
+++ psi-0.15_pre20110526.hacked/src/libpsi/tools/spellchecker/spellchecker.h	2011-07-24 09:57:59.337805244 +0400
@@ -37,9 +37,11 @@
 	static SpellChecker* instance();
 	virtual bool available() const;
 	virtual bool writable() const;
-	virtual QList<QString> suggestions(const QString&);
+	virtual QList<QString> suggestions(const QString& word, const QString& lang, unsigned max_sugs);
 	virtual bool isCorrect(const QString&);
-	virtual bool add(const QString&);
+	virtual bool add(const QString& word, const QString& lang);
+	virtual QList<QString> getAllLanguages() const;
+	virtual void setActiveLanguages(const QList<QString>&);
 
 protected:
 	SpellChecker();
diff -ur portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/msgmle.cpp psi-0.15_pre20110526.hacked/src/msgmle.cpp
--- portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/msgmle.cpp	2011-07-24 09:59:58.907310474 +0400
+++ psi-0.15_pre20110526.hacked/src/msgmle.cpp	2011-07-24 09:57:59.158807483 +0400
@@ -256,12 +256,36 @@
 	return (SpellChecker::instance()->available() && PsiOptions::instance()->getOption("options.ui.spell-check.enabled").toBool());
 }
 
+QStringList ChatEdit::checkSpellingActiveLanguages()
+{
+	return PsiOptions::instance()->getOption("options.ui.spell-check.langs").toString().split(QRegExp("\\s+|,|\\:"), QString::SkipEmptyParts);
+}
+
+unsigned ChatEdit::checkSpellingMaxSuggestions()
+{
+	return PsiOptions::instance()->getOption("options.ui.spell-check.maxsugs").toString().toInt();
+}
+
 void ChatEdit::setCheckSpelling(bool b)
 {
 	check_spelling_ = b;
 	if (check_spelling_) {
 		if (!spellhighlighter_)
 			spellhighlighter_ = new SpellHighlighter(document());
+		all_langs_ = SpellChecker::instance()->getAllLanguages();
+		langs_ = checkSpellingActiveLanguages();
+		// No langs specified in options?
+		if (langs_.isEmpty()) {
+			QString env_lang(getenv("LANG"));
+			// Let's try to use the language specified in environment ...
+			if (!env_lang.isEmpty() && all_langs_.contains(env_lang))
+				langs_.append(env_lang);
+			else // ... still no luck? Will use all available languages then.
+				langs_ = all_langs_;
+		}
+		SpellChecker::instance()->setActiveLanguages(langs_);
+		// If zero, means no limit (empty option also translates to zero).
+		max_sugs_ = checkSpellingMaxSuggestions();
 	}
 	else {
 		delete spellhighlighter_;
@@ -334,19 +358,34 @@
 		tc.movePosition(QTextCursor::EndOfWord, QTextCursor::KeepAnchor);
 		QString selected_word = tc.selectedText();
 		if (!selected_word.isEmpty() && !SpellChecker::instance()->isCorrect(selected_word)) {
-			QList<QString> suggestions = SpellChecker::instance()->suggestions(selected_word);
-			if (!suggestions.isEmpty() || SpellChecker::instance()->writable()) {
-				QMenu spell_menu;
+			QMenu spell_menu;
+			foreach (QString lang, langs_) {
+				QList<QString> suggestions = SpellChecker::instance()->suggestions(selected_word, lang, max_sugs_);
 				if (!suggestions.isEmpty()) {
+					QAction* lang_name = spell_menu.addAction(tr("Language") + ": " + lang);
+					lang_name->setDisabled(true);
 					foreach(QString suggestion, suggestions) {
 						QAction* act_suggestion = spell_menu.addAction(suggestion);
 						connect(act_suggestion,SIGNAL(triggered()),SLOT(applySuggestion()));
 					}
 					spell_menu.addSeparator();
 				}
+			}
+			if (!spell_menu.isEmpty() || SpellChecker::instance()->writable() || !all_langs_.isEmpty()) {
 				if (SpellChecker::instance()->writable()) {
-					QAction* act_add = spell_menu.addAction(tr("Add to dictionary"));
-					connect(act_add,SIGNAL(triggered()),SLOT(addToDictionary()));
+					foreach (QString lang, langs_) {
+						QAction* act_add = spell_menu.addAction(tr("Add to dictionary") + ": " + lang);
+						act_add->setData(lang);
+						connect(act_add,SIGNAL(triggered()),SLOT(addToDictionary()));
+					}
+					spell_menu.addSeparator();
+					foreach (QString lang, all_langs_) {
+						QAction* act_lang_sel = spell_menu.addAction(tr("Use language") + ": " + lang);
+						act_lang_sel->setCheckable(true);
+						act_lang_sel->setChecked(langs_.contains(lang));
+						act_lang_sel->setData(lang);
+						connect(act_lang_sel,SIGNAL(triggered()),SLOT(changedUseLang()));
+					}
 				}
 				spell_menu.exec(QCursor::pos());
 				e->accept();
@@ -396,18 +435,35 @@
  */
 void ChatEdit::addToDictionary()
 {
+	QAction* action = static_cast<QAction*>(sender());
 	QTextCursor	tc = cursorForPosition(last_click_);
 	int current_position = textCursor().position();
 
 	// Get the selected word
 	tc.movePosition(QTextCursor::StartOfWord, QTextCursor::MoveAnchor);
 	tc.movePosition(QTextCursor::EndOfWord, QTextCursor::KeepAnchor);
-	SpellChecker::instance()->add(tc.selectedText());
+	SpellChecker::instance()->add(tc.selectedText(), action->data().toString());
 	
 	// Put the cursor where it belongs
 	tc.clearSelection();
 	tc.setPosition(current_position);
 	setTextCursor(tc);
+
+	spellhighlighter_->rehighlight();
+}
+
+void ChatEdit::changedUseLang()
+{
+	QAction* action = static_cast<QAction*>(sender());
+	QString lang = action->data().toString();
+
+	if (langs_.contains(lang))
+		langs_.remove(lang);
+	else
+		langs_.append(lang);
+
+	SpellChecker::instance()->setActiveLanguages(langs_);
+	spellhighlighter_->rehighlight();
 }
 
 void ChatEdit::optionsChanged()
diff -ur portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/msgmle.h psi-0.15_pre20110526.hacked/src/msgmle.h
--- portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/msgmle.h	2011-07-24 09:59:58.910310438 +0400
+++ psi-0.15_pre20110526.hacked/src/msgmle.h	2011-07-24 09:58:02.726762879 +0400
@@ -52,6 +52,8 @@
 	void setFont(const QFont &);
 
 	static bool checkSpellingGloballyEnabled();
+	static QStringList checkSpellingActiveLanguages();
+	static unsigned checkSpellingMaxSuggestions();
 	void setCheckSpelling(bool);
 	XMPP::HTMLElement toHTMLElement();
 	CapitalLettersController * capitalizer();
@@ -66,6 +68,7 @@
 protected slots:
  	void applySuggestion();
  	void addToDictionary();
+	void changedUseLang();
 	void optionsChanged();
 	void showHistoryMessageNext();
 	void showHistoryMessagePrev();
@@ -86,6 +89,8 @@
 private:
 	QWidget	*dialog_;
 	bool check_spelling_;
+	QList<QString> langs_, all_langs_;
+	unsigned max_sugs_;
 	SpellHighlighter* spellhighlighter_;
 	QPoint last_click_;
 	int previous_position_;
diff -ur portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/options/opt_advanced.cpp psi-0.15_pre20110526.hacked/src/options/opt_advanced.cpp
--- portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/options/opt_advanced.cpp	2011-07-24 09:59:57.676325864 +0400
+++ psi-0.15_pre20110526.hacked/src/options/opt_advanced.cpp	2011-07-24 09:57:56.814836779 +0400
@@ -45,6 +45,8 @@
 #endif
 
 	d->ck_spell->setEnabled(SpellChecker::instance()->available());
+	d->le_spellLangs->setEnabled(SpellChecker::instance()->available());
+	d->le_spellMaxSugs->setEnabled(SpellChecker::instance()->available());
 
 	d->ck_messageevents->setWhatsThis(
 		tr("Enables the sending and requesting of message events such as "
@@ -60,6 +62,12 @@
 		tr("Enables remote controlling your client from other locations"));
 	d->ck_spell->setWhatsThis(
 		tr("Check this option if you want your spelling to be checked"));
+	d->le_spellLangs->setWhatsThis(
+		tr("List here all languages you want your spell checker to use"
+		" when checking your spelling."));
+	d->le_spellMaxSugs->setWhatsThis(
+		tr("Maximal number of suggestion words per language you want to see"
+		" in context menu when the word is misspelled."));
 	d->ck_contactsMessageFormatting->setWhatsThis(
 		tr("If enabled, Psi will display incoming messages formatted in the style specified by the contact"));
 	d->ck_autocopy->setWhatsThis(
@@ -99,6 +107,10 @@
 	connect(d->ck_messageevents,SIGNAL(toggled(bool)),d->ck_sendComposingEvents,SLOT(setEnabled(bool)));
 	d->ck_inactiveevents->setEnabled(d->ck_messageevents->isChecked());
 	d->ck_sendComposingEvents->setEnabled(d->ck_messageevents->isChecked());
+	connect(d->ck_spell,SIGNAL(toggled(bool)),d->le_spellLangs,SLOT(setEnabled(bool)));
+	connect(d->ck_spell,SIGNAL(toggled(bool)),d->le_spellMaxSugs,SLOT(setEnabled(bool)));
+	d->le_spellLangs->setEnabled(d->ck_spell->isChecked());
+	d->le_spellMaxSugs->setEnabled(d->ck_spell->isChecked());
 
 	return w;
 }
@@ -116,8 +128,11 @@
 	PsiOptions::instance()->setOption("options.ui.notifications.request-receipts", d->ck_requestReceipts->isChecked());
 	PsiOptions::instance()->setOption("options.ui.notifications.send-receipts", d->ck_sendReceipts->isChecked());
 	PsiOptions::instance()->setOption("options.external-control.adhoc-remote-control.enable", d->ck_rc->isChecked());
-	if ( SpellChecker::instance()->available() )
+	if ( SpellChecker::instance()->available() ) {
 		PsiOptions::instance()->setOption("options.ui.spell-check.enabled",d->ck_spell->isChecked());
+		PsiOptions::instance()->setOption("options.ui.spell-check.langs", d->le_spellLangs->text());
+		PsiOptions::instance()->setOption("options.ui.spell-check.maxsugs", d->le_spellMaxSugs->text());
+	}
 	PsiOptions::instance()->setOption("options.html.chat.render", d->ck_contactsMessageFormatting->isChecked());
 	PsiOptions::instance()->setOption("options.ui.automatically-copy-selected-text", d->ck_autocopy->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.use-single-click", d->ck_singleclick->isChecked());
@@ -145,10 +160,15 @@
 	d->ck_requestReceipts->setChecked( PsiOptions::instance()->getOption("options.ui.notifications.request-receipts").toBool() );
 	d->ck_sendReceipts->setChecked( PsiOptions::instance()->getOption("options.ui.notifications.send-receipts").toBool() );
 	d->ck_rc->setChecked( PsiOptions::instance()->getOption("options.external-control.adhoc-remote-control.enable").toBool() );
-	if ( !SpellChecker::instance()->available() )
+	if ( !SpellChecker::instance()->available() ) {
 		d->ck_spell->setChecked(false);
-	else
+		d->le_spellLangs->setText("");
+		d->le_spellMaxSugs->setText("");
+	} else {
 		d->ck_spell->setChecked(PsiOptions::instance()->getOption("options.ui.spell-check.enabled").toBool());
+		d->le_spellLangs->setText(PsiOptions::instance()->getOption("options.ui.spell-check.langs").toString());
+		d->le_spellMaxSugs->setText(PsiOptions::instance()->getOption("options.ui.spell-check.maxsugs").toString());
+	}
 	d->ck_contactsMessageFormatting->setChecked(PsiOptions::instance()->getOption("options.html.chat.render").toBool());
 	d->ck_autocopy->setChecked( PsiOptions::instance()->getOption("options.ui.automatically-copy-selected-text").toBool() );
 	d->ck_singleclick->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.use-single-click").toBool() );
diff -ur portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/options/opt_advanced.ui psi-0.15_pre20110526.hacked/src/options/opt_advanced.ui
--- portage/net-im/psi-0.15_pre20110526/work/psi-0.15_pre20110526/src/options/opt_advanced.ui	2011-07-24 09:59:57.678325838 +0400
+++ psi-0.15_pre20110526.hacked/src/options/opt_advanced.ui	2011-07-24 09:57:56.763837427 +0400
@@ -72,6 +72,26 @@
     </widget>
    </item>
    <item>
+    <widget class="QLabel" name="TextLabel3" >
+     <property name="text" >
+      <string>List of active spellchecker languages:</string>
+     </property>
+    </widget>
+   </item>
+   <item>
+    <widget class="QLineEdit" name="le_spellLangs" />
+   </item>
+   <item>
+    <widget class="QLabel" name="TextLabel4" >
+     <property name="text" >
+      <string>Maximum suggestions per language:</string>
+     </property>
+    </widget>
+   </item>
+   <item>
+    <widget class="QLineEdit" name="le_spellMaxSugs" />
+   </item>
+   <item>
     <widget class="QCheckBox" name="ck_contactsMessageFormatting" >
      <property name="text" >
       <string>Use contacts' message formatting</string>
