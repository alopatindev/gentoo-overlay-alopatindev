diff -ur a/Telegram/SourceFiles/history/history_inner_widget.cpp b/Telegram/SourceFiles/history/history_inner_widget.cpp
--- a/Telegram/SourceFiles/history/history_inner_widget.cpp	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/history/history_inner_widget.cpp	2023-11-01 03:37:25.551425129 +0600
@@ -4004,9 +4004,6 @@
 					dateWidth += st::msgServicePadding.left() + st::msgServicePadding.right();
 					auto dateLeft = st::msgServiceMargin.left();
 					auto maxwidth = _contentWidth;
-					if (_isChatWide) {
-						maxwidth = qMin(maxwidth, int32(st::msgMaxWidth + 2 * st::msgPhotoSkip + 2 * st::msgMargin.left()));
-					}
 					auto widthForDate = maxwidth - st::msgServiceMargin.left() - st::msgServiceMargin.left();
 
 					dateLeft += (widthForDate - dateWidth) / 2;
diff -ur a/Telegram/SourceFiles/history/view/history_view_element.cpp b/Telegram/SourceFiles/history/view/history_view_element.cpp
--- a/Telegram/SourceFiles/history/view/history_view_element.cpp	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/history/view/history_view_element.cpp	2023-11-01 03:39:51.132654787 +0600
@@ -320,13 +320,6 @@
 	p.setPen(st->historyUnreadBarFg());
 
 	int maxwidth = w;
-	if (chatWide) {
-		maxwidth = qMin(
-			maxwidth,
-			st::msgMaxWidth
-				+ 2 * st::msgPhotoSkip
-				+ 2 * st::msgMargin.left());
-	}
 	w = maxwidth;
 
 	const auto skip = st::historyUnreadBarHeight
@@ -670,6 +663,10 @@
 	return 0;
 }
 
+int Element::plainMaxWidth() const {
+	return 0;
+}
+
 int Element::bottomInfoFirstLineWidth() const {
 	return 0;
 }
diff -ur a/Telegram/SourceFiles/history/view/history_view_element.h b/Telegram/SourceFiles/history/view/history_view_element.h
--- a/Telegram/SourceFiles/history/view/history_view_element.h	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/history/view/history_view_element.h	2023-11-01 03:40:16.636203544 +0600
@@ -328,6 +328,7 @@
 	[[nodiscard]] int skipBlockWidth() const;
 	[[nodiscard]] int skipBlockHeight() const;
 	[[nodiscard]] virtual int infoWidth() const;
+	[[nodiscard]] virtual int plainMaxWidth() const;
 	[[nodiscard]] virtual int bottomInfoFirstLineWidth() const;
 	[[nodiscard]] virtual bool bottomInfoIsWide() const;
 
diff -ur a/Telegram/SourceFiles/history/view/history_view_list_widget.cpp b/Telegram/SourceFiles/history/view/history_view_list_widget.cpp
--- a/Telegram/SourceFiles/history/view/history_view_list_widget.cpp	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/history/view/history_view_list_widget.cpp	2023-11-01 03:41:00.526574290 +0600
@@ -3441,9 +3441,6 @@
 					dateWidth += st::msgServicePadding.left() + st::msgServicePadding.right();
 					auto dateLeft = st::msgServiceMargin.left();
 					auto maxwidth = view->width();
-					if (_isChatWide) {
-						maxwidth = qMin(maxwidth, int32(st::msgMaxWidth + 2 * st::msgPhotoSkip + 2 * st::msgMargin.left()));
-					}
 					auto widthForDate = maxwidth - st::msgServiceMargin.left() - st::msgServiceMargin.left();
 
 					dateLeft += (widthForDate - dateWidth) / 2;
diff -ur a/Telegram/SourceFiles/history/view/history_view_message.cpp b/Telegram/SourceFiles/history/view/history_view_message.cpp
--- a/Telegram/SourceFiles/history/view/history_view_message.cpp	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/history/view/history_view_message.cpp	2023-11-01 03:45:14.175383704 +0600
@@ -3877,7 +3877,6 @@
 	//	contentLeft += st::msgPhotoSkip - (hmaxwidth - hwidth);
 	}
 	accumulate_min(contentWidth, maxWidth());
-	accumulate_min(contentWidth, int(_bubbleWidthLimit));
 	if (mediaWidth < contentWidth) {
 		const auto textualWidth = plainMaxWidth();
 		if (mediaWidth < textualWidth
@@ -3887,7 +3886,10 @@
 			contentWidth = mediaWidth;
 		}
 	}
-	if (contentWidth < availableWidth && !delegate()->elementIsChatWide()) {
+	if (contentWidth < availableWidth
+		&& !delegate()->elementIsChatWide()
+			|| (context() == Context::Replies
+				&& item->isDiscussionPost())) {
 		if (outbg) {
 			contentLeft += availableWidth - contentWidth;
 		} else if (centeredView) {
@@ -3989,7 +3991,6 @@
 	}
 	accumulate_min(contentWidth, maxWidth());
 	_bubbleWidthLimit = std::max(st::msgMaxWidth, monospaceMaxWidth());
-	accumulate_min(contentWidth, int(_bubbleWidthLimit));
 	if (mediaDisplayed) {
 		media->resizeGetHeight(contentWidth);
 		if (media->width() < contentWidth) {
@@ -4022,7 +4023,7 @@
 			_reactions->resizeGetHeight(textWidth);
 		}
 
-		if (contentWidth == maxWidth()) {
+		if (false) {
 			if (mediaDisplayed) {
 				if (entry) {
 					newHeight += entry->resizeGetHeight(contentWidth);
diff -ur a/Telegram/SourceFiles/history/view/history_view_message.h b/Telegram/SourceFiles/history/view/history_view_message.h
--- a/Telegram/SourceFiles/history/view/history_view_message.h	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/history/view/history_view_message.h	2023-11-01 03:46:30.222692686 +0600
@@ -146,6 +146,7 @@
 	[[nodiscard]] bool toggleSelectionByHandlerClick(
 		const ClickHandlerPtr &handler) const override;
 	[[nodiscard]] int infoWidth() const override;
+	[[nodiscard]] int plainMaxWidth() const override;
 	[[nodiscard]] int bottomInfoFirstLineWidth() const override;
 	[[nodiscard]] bool bottomInfoIsWide() const override;
 	[[nodiscard]] bool isSignedAuthorElided() const override;
@@ -283,7 +284,7 @@
 	void ensureRightAction() const;
 	void refreshTopicButton();
 	void refreshInfoSkipBlock();
-	[[nodiscard]] int plainMaxWidth() const;
+	// [[nodiscard]] int plainMaxWidth() const;
 	[[nodiscard]] int monospaceMaxWidth() const;
 
 	void validateInlineKeyboard(HistoryMessageReplyMarkup *markup);
diff -ur a/Telegram/SourceFiles/history/view/history_view_service_message.cpp b/Telegram/SourceFiles/history/view/history_view_service_message.cpp
--- a/Telegram/SourceFiles/history/view/history_view_service_message.cpp	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/history/view/history_view_service_message.cpp	2023-11-01 03:48:00.663456614 +0600
@@ -154,9 +154,7 @@
 		int w,
 		bool chatWide) {
 	int left = st::msgServiceMargin.left();
-	const auto maxwidth = chatWide
-		? std::min(w, WideChatWidth())
-		: w;
+	const auto maxwidth = w;
 	w = maxwidth - st::msgServiceMargin.left() - st::msgServiceMargin.left();
 
 	left += (w - dateTextWidth - st::msgServicePadding.left() - st::msgServicePadding.right()) / 2;
@@ -413,9 +411,6 @@
 
 QRect Service::countGeometry() const {
 	auto result = QRect(0, 0, width(), height());
-	if (delegate()->elementIsChatWide()) {
-		result.setWidth(qMin(result.width(), st::msgMaxWidth + 2 * st::msgPhotoSkip + 2 * st::msgMargin.left()));
-	}
 	return result.marginsRemoved(st::msgServiceMargin);
 }
 
@@ -435,9 +430,6 @@
 			+ st::msgServiceMargin.bottom();
 	} else if (!text().isEmpty()) {
 		auto contentWidth = newWidth;
-		if (delegate()->elementIsChatWide()) {
-			accumulate_min(contentWidth, st::msgMaxWidth + 2 * st::msgPhotoSkip + 2 * st::msgMargin.left());
-		}
 		contentWidth -= st::msgServiceMargin.left() + st::msgServiceMargin.left(); // two small margins
 		if (contentWidth < st::msgServicePadding.left() + st::msgServicePadding.right() + 1) {
 			contentWidth = st::msgServicePadding.left() + st::msgServicePadding.right() + 1;
diff -ur a/Telegram/SourceFiles/history/view/media/history_view_document.cpp b/Telegram/SourceFiles/history/view/media/history_view_document.cpp
--- a/Telegram/SourceFiles/history/view/media/history_view_document.cpp	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/history/view/media/history_view_document.cpp	2023-11-01 03:49:16.787433044 +0600
@@ -385,7 +385,11 @@
 
 	if (auto named = Get<HistoryDocumentNamed>()) {
 		accumulate_max(maxWidth, tleft + named->namew + tright);
-		accumulate_min(maxWidth, st::msgMaxWidth);
+		if (captioned) {
+			accumulate_max(maxWidth, captioned->caption.maxWidth() + st::msgPadding.left() + st::msgPadding.right());
+		} else {
+			accumulate_min(maxWidth, st::msgMaxWidth);
+		}
 	}
 	if (voice && voice->transcribe) {
 		maxWidth += st::historyTranscribeSkip
diff -ur a/Telegram/SourceFiles/history/view/media/history_view_gif.cpp b/Telegram/SourceFiles/history/view/media/history_view_gif.cpp
--- a/Telegram/SourceFiles/history/view/media/history_view_gif.cpp	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/history/view/media/history_view_gif.cpp	2023-11-01 03:51:45.282020799 +0600
@@ -156,13 +156,15 @@
 }
 
 QSize Gif::countThumbSize(int &inOutWidthMax) const {
+	const auto captionWithPaddings = _caption.maxWidth() + st::msgPadding.left() + st::msgPadding.right();
 	const auto maxSize = _data->isVideoFile()
 		? st::maxMediaSize
 		: _data->isVideoMessage()
 		? st::maxVideoMessageSize
 		: st::maxGifSize;
+	const auto maxSizeWithCaption = std::max(captionWithPaddings, maxSize);
 	const auto size = style::ConvertScale(videoSize());
-	accumulate_min(inOutWidthMax, maxSize);
+	accumulate_min(inOutWidthMax, maxSizeWithCaption);
 	return DownscaledSize(size, { inOutWidthMax, maxSize });
 }
 
@@ -199,6 +201,7 @@
 	}
 	if (_parent->hasBubble()) {
 		if (!_caption.isEmpty()) {
+			accumulate_max(maxWidth, _caption.maxWidth() + st::msgPadding.left() + st::msgPadding.right());
 			maxWidth = qMax(maxWidth, st::msgPadding.left()
 				+ _caption.maxWidth()
 				+ st::msgPadding.right());
diff -ur a/Telegram/SourceFiles/history/view/media/history_view_location.cpp b/Telegram/SourceFiles/history/view/media/history_view_location.cpp
--- a/Telegram/SourceFiles/history/view/media/history_view_location.cpp	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/history/view/media/history_view_location.cpp	2023-11-01 03:54:03.303186600 +0600
@@ -92,9 +92,11 @@
 
 	if (_parent->hasBubble()) {
 		if (!_title.isEmpty()) {
+			maxWidth = qMax(maxWidth, _title.maxWidth() + st::msgPadding.left() + st::msgPadding.right());
 			minHeight += qMin(_title.countHeight(maxWidth - st::msgPadding.left() - st::msgPadding.right()), 2 * st::webPageTitleFont->height);
 		}
 		if (!_description.isEmpty()) {
+			maxWidth = qMax(maxWidth, _description.maxWidth() + st::msgPadding.left() + st::msgPadding.right());
 			minHeight += qMin(_description.countHeight(maxWidth - st::msgPadding.left() - st::msgPadding.right()), 3 * st::webPageDescriptionFont->height);
 		}
 		if (!_title.isEmpty() || !_description.isEmpty()) {
@@ -117,11 +119,7 @@
 		tw = st::maxMediaSize;
 	}
 	auto newHeight = th;
-	if (tw > newWidth) {
-		newHeight = (newWidth * newHeight / tw);
-	} else {
-		newWidth = tw;
-	}
+	newHeight = (newWidth * newHeight / tw);
 	auto minWidth = std::clamp(
 		_parent->minWidthForMedia(),
 		st::minPhotoSize,
diff -ur a/Telegram/SourceFiles/history/view/media/history_view_media_grouped.cpp b/Telegram/SourceFiles/history/view/media/history_view_media_grouped.cpp
--- a/Telegram/SourceFiles/history/view/media/history_view_media_grouped.cpp	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/history/view/media/history_view_media_grouped.cpp	2023-11-01 03:55:36.937310944 +0600
@@ -127,10 +127,16 @@
 		sizes.push_back(part.content->sizeForGroupingOptimal(maxWidth));
 	}
 
+	const auto captionWithPaddings = _caption.maxWidth()
+		+ st::msgPadding.left()
+		+ st::msgPadding.right();
+	auto groupMaxWidth = st::historyGroupWidthMax;
+	accumulate_max(groupMaxWidth, captionWithPaddings);
+
 	const auto layout = (_mode == Mode::Grid)
 		? Ui::LayoutMediaGroup(
 			sizes,
-			st::historyGroupWidthMax,
+			groupMaxWidth,
 			st::historyGroupWidthMin,
 			st::historyGroupSkip)
 		: LayoutPlaylist(sizes);
@@ -146,6 +152,7 @@
 	}
 
 	if (!_caption.isEmpty()) {
+		maxWidth = qMax(maxWidth, captionWithPaddings);
 		auto captionw = maxWidth - st::msgPadding.left() - st::msgPadding.right();
 		minHeight += st::mediaCaptionSkip + _caption.countHeight(captionw);
 		if (isBubbleBottom()) {
diff -ur a/Telegram/SourceFiles/history/view/media/history_view_photo.cpp b/Telegram/SourceFiles/history/view/media/history_view_photo.cpp
--- a/Telegram/SourceFiles/history/view/media/history_view_photo.cpp	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/history/view/media/history_view_photo.cpp	2023-11-01 03:57:29.241593072 +0600
@@ -200,15 +200,17 @@
 			? st::historyPhotoBubbleMinWidth
 			: st::minPhotoSize),
 		st::maxMediaSize);
-	const auto maxActualWidth = qMax(scaled.width(), minWidth);
+	auto maxActualWidth = qMax(scaled.width(), minWidth);
 	auto maxWidth = qMax(maxActualWidth, scaled.height());
 	auto minHeight = qMax(scaled.height(), st::minPhotoSize);
 	if (_parent->hasBubble() && !_caption.isEmpty()) {
+		const auto captionWithPaddings = (st::msgPadding.left() + _caption.maxWidth()
+									+ st::msgPadding.right());
+		maxActualWidth = qMax(maxActualWidth, captionWithPaddings);
+		maxWidth = qMax(maxWidth, captionWithPaddings);
 		maxWidth = qMax(
 			maxWidth,
-			(st::msgPadding.left()
-				+ _caption.maxWidth()
-				+ st::msgPadding.right()));
+			captionWithPaddings);
 		minHeight = adjustHeightForLessCrop(
 			dimensions,
 			{ maxWidth, minHeight });
diff -ur a/Telegram/SourceFiles/history/view/media/history_view_web_page.cpp b/Telegram/SourceFiles/history/view/media/history_view_web_page.cpp
--- a/Telegram/SourceFiles/history/view/media/history_view_web_page.cpp	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/history/view/media/history_view_web_page.cpp	2023-11-01 03:59:58.492863190 +0600
@@ -357,6 +357,8 @@
 		maxWidth += margins.left() + _openButtonWidth + margins.right();
 	}
 	maxWidth += padding.left() + padding.right();
+	accumulate_min(maxWidth, st::msgMaxWidth);
+	accumulate_max(maxWidth, _parent->plainMaxWidth());
 	minHeight += padding.top() + padding.bottom();
 
 	if (_asArticle) {
@@ -371,6 +373,7 @@
 	}
 
 	auto padding = inBubblePadding() + innerMargin();
+	accumulate_min(newWidth, maxWidth());
 	auto innerWidth = newWidth - padding.left() - padding.right();
 	auto newHeight = 0;
 
diff -ur a/Telegram/SourceFiles/window/themes/window_theme_preview.cpp b/Telegram/SourceFiles/window/themes/window_theme_preview.cpp
--- a/Telegram/SourceFiles/window/themes/window_theme_preview.cpp	1970-01-01 06:00:00.000000000 +0600
+++ b/Telegram/SourceFiles/window/themes/window_theme_preview.cpp	2023-11-01 04:01:38.277079208 +0600
@@ -266,7 +266,6 @@
 	const auto &st = st::msgFileLayout;
 	auto tleft = st.padding.left() + st.thumbSize + st.thumbSkip;
 	accumulate_max(width, tleft + st::normalFont->width(wavestatus) + skipBlock.width() + st::msgPadding.right());
-	accumulate_min(width, st::msgMaxWidth);
 
 	auto height = st.padding.top() + st.thumbSize + st.padding.bottom();
 	addBubble(std::move(bubble), width, height, date, status);
@@ -299,7 +298,6 @@
 
 	auto width = _history.width() - st::msgMargin.left() - st::msgMargin.right();
 	accumulate_min(width, st::msgPadding.left() + bubble.text.maxWidth() + st::msgPadding.right());
-	accumulate_min(width, st::msgMaxWidth);
 
 	auto textWidth = qMax(width - st::msgPadding.left() - st::msgPadding.right(), 1);
 	auto textHeight = bubble.text.countHeight(textWidth);
@@ -328,7 +326,6 @@
 
 	auto width = _history.width() - st::msgMargin.left() - st::msgMargin.right();
 	accumulate_min(width, bubble.photoWidth);
-	accumulate_min(width, st::msgMaxWidth);
 
 	auto textWidth = qMax(width - st::msgPadding.left() - st::msgPadding.right(), 1);
 	auto textHeight = bubble.text.countHeight(textWidth);
