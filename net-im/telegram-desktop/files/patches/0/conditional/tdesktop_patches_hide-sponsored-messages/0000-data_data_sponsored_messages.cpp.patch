diff --git i/Telegram/SourceFiles/data/data_sponsored_messages.cpp w/Telegram/SourceFiles/data/data_sponsored_messages.cpp
index 10e69d37b..fbcb20158 100644
--- i/Telegram/SourceFiles/data/components/sponsored_messages.cpp
+++ w/Telegram/SourceFiles/data/components/sponsored_messages.cpp
@@ -29,7 +29,7 @@ https://github.com/telegramdesktop/tdesk
 namespace {
 
 constexpr auto kMs = crl::time(1000);
-constexpr auto kRequestTimeLimit = 5 * 60 * crl::time(1000);
+constexpr auto kRequestTimeLimit = 9999999 * 60 * crl::time(1000);
 
 const auto kFlaggedPreload = ((MediaPreload*)quintptr(0x01));
 
@@ -95,6 +95,9 @@ void SponsoredMessages::clearOldRequests
 
 SponsoredMessages::AppendResult SponsoredMessages::append(
 		not_null<History*> history) {
+	if (1) {
+		return SponsoredMessages::AppendResult::None;
+	}
 	if (isTopBarFor(history)) {
 		return SponsoredMessages::AppendResult::None;
 	}
@@ -131,6 +134,9 @@ void SponsoredMessages::inject(
 		MsgId injectAfterMsgId,
 		int betweenHeight,
 		int fallbackWidth) {
+	if (1) {
+		return;
+	}
 	if (!canHaveFor(history)) {
 		return;
 	}
@@ -237,29 +237,21 @@ void SponsoredMessages::inject(
 }
 
 bool SponsoredMessages::canHaveFor(not_null<History*> history) const {
-	if (history->peer->isChannel()) {
-		return true;
-	} else if (const auto user = history->peer->asUser()) {
-		return user->isBot();
-	}
 	return false;
 }
 
 bool SponsoredMessages::canHaveFor(not_null<HistoryItem*> item) const {
-	return item->history()->peer->isBroadcast()
-		&& item->isRegular();
+	return false;
 }
 
 bool SponsoredMessages::isTopBarFor(not_null<History*> history) const {
-	if (peerIsUser(history->peer->id)) {
-		if (const auto user = history->peer->asUser()) {
-			return user->isBot();
-		}
-	}
 	return false;
 }
 
 void SponsoredMessages::request(not_null<History*> history, Fn<void()> done) {
+  if (1) {
+    return;
+  }
 	if (!canHaveFor(history)) {
 		return;
 	}
