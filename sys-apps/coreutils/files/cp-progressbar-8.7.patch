diff -ur /var/tmp/portage/sys-apps/coreutils-8.7/work/coreutils-8.7/man/cp.1 coreutils-8.7.hacked/man/cp.1
--- /var/tmp/portage/sys-apps/coreutils-8.7/work/coreutils-8.7/man/cp.1	2010-11-13 19:23:10.000000000 +0300
+++ coreutils-8.7.hacked/man/cp.1	2010-12-22 16:40:57.000000000 +0300
@@ -27,6 +27,9 @@
 \fB\-\-backup\fR[=\fICONTROL\fR]
 make a backup of each existing destination file
 .TP
+\fB\-B,\fR \fB\-\-progress\fR
+show a progress bar
+.TP
 \fB\-b\fR
 like \fB\-\-backup\fR but does not accept an argument
 .TP
diff -ur /var/tmp/portage/sys-apps/coreutils-8.7/work/coreutils-8.7/src/copy.c coreutils-8.7.hacked/src/copy.c
--- /var/tmp/portage/sys-apps/coreutils-8.7/work/coreutils-8.7/src/copy.c	2010-10-28 14:31:17.000000000 +0400
+++ coreutils-8.7.hacked/src/copy.c	2010-12-22 17:03:28.000000000 +0300
@@ -29,6 +29,10 @@
 # include <priv.h>
 #endif
 
+#if HAVE_SYS_IOCTL_H
+# include <sys/ioctl.h>
+#endif
+
 #include "system.h"
 #include "acl.h"
 #include "backupfile.h"
@@ -45,6 +49,7 @@
 #include "hash-triple.h"
 #include "ignore-value.h"
 #include "quote.h"
+#include "quotearg.h"
 #include "same.h"
 #include "savedir.h"
 #include "stat-time.h"
@@ -53,6 +58,7 @@
 #include "write-any-file.h"
 #include "areadlink.h"
 #include "yesno.h"
+#include "xstrtol.h"
 
 #if USE_XATTR
 # include <attr/error_context.h>
@@ -443,6 +449,231 @@
   return lchmod (name, mode);
 }
 
+/* This function check:
+     - src dim tot
+     - console line lenght
+   If the progress flag is set */
+
+int
+progress_bar_check(const char *src_name, size_t dim_tot)
+{
+  size_t line_length = 0;
+
+  /* Check:
+     if filesize is very little, exit */
+  if (! (dim_tot / 1024))
+    {
+      /*printf("%s: is very little (1 KB required), " \
+             "you can't to use progress bar\n",
+             src_name);*/
+
+      return -1;
+    }
+
+  /* By ls.c code */
+  {
+    char const *p = getenv("COLUMNS");
+
+    if (p && *p)
+      {
+        unsigned long int tmp_ulong;
+
+   if (xstrtoul (p, NULL, 0, &tmp_ulong, NULL) == LONGINT_OK
+            && 0 < tmp_ulong && tmp_ulong <= SIZE_MAX)
+          line_length = tmp_ulong;
+        else
+          error(0, 0,
+                _("ignoring invalid width in environment variable COLUMNS: %s"),
+                quotearg (p));
+      }
+  }
+
+#ifdef TIOCGWINSZ
+  {
+    struct winsize ws;
+
+    if (ioctl(STDOUT_FILENO, TIOCGWINSZ, &ws) != -1
+   && 0 < ws.ws_col && ws.ws_col == (size_t) ws.ws_col)
+      line_length = ws.ws_col;
+  }
+#endif
+
+  if (line_length < 80)
+    {
+      if (! line_length)
+        printf("(null): COLUMNS not found, " \
+          "you can't to use progress bar\n");
+      else
+        printf("%d: console line lenght is very short, " \
+               "you can't to use progress bar\n", line_length);
+
+      return -1;
+    }
+
+  return 0;
+}
+
+/* This function displays a progress bar
+   if the progress flag is set.
+   It uses a 1:2 scales. */
+
+void
+progress_bar_print(size_t dim_tot, size_t dim_cur)
+{
+  int i;
+  size_t per_tot, per_cur, per_tot_scl, per_cur_scl;
+
+  /* Size in KiB */
+  dim_tot /= 1024;
+  dim_cur /= 1024;
+
+  per_tot = 100;
+  /* total percentage */
+  per_cur = (per_tot * dim_cur) / dim_tot;
+  /* current percentage */
+
+  /* 1:2 scale */
+  per_tot_scl = per_tot / 4;
+  per_cur_scl = per_cur / 4;
+
+  /* Refresh ther bar indicator */
+  printf("\r [");
+
+  /* Display the bar indicator:
+     - =   : indicates a part the bar
+     - >   : indicates the end of the bar
+             (if it's finish, convert '>' to '='*/
+  for (i = 0; i < per_cur_scl; i++)
+    if ((i + 1) == per_cur_scl)
+      if (per_cur_scl == 50)
+        putchar('=');
+      else
+        putchar('>');
+    else
+      putchar('=');
+
+  for (i = per_cur_scl; i < per_tot_scl; i++)
+    putchar(' ');
+
+  printf("] %3d%%", per_cur);
+
+  fflush(stdout);
+}
+
+/* This function displays speed copy
+   if the progress flag is set. */
+
+void
+progress_bar_print_speed(struct tm *tm_init,
+            size_t *speed, size_t *speed_last)
+{
+  time_t time_cur;
+  struct tm tm_cur;
+  size_t speed_si;
+  float speed_last_, speed_si_;
+  int type = 0;
+
+  time_cur = time(NULL);
+  tm_cur = *(struct tm *) localtime(&time_cur);
+
+  if (tm_init->tm_sec == tm_cur.tm_sec)
+    {
+      if (tm_init->tm_sec == 60)
+        tm_init->tm_sec = 0;
+      else
+        tm_init->tm_sec += 1;
+
+      *speed_last = *speed;
+      *speed = 0;
+    }
+  else if (tm_init->tm_sec != tm_cur.tm_sec + 1)
+      /* If the disk crashes, again */
+      tm_init->tm_sec = tm_cur.tm_sec + 1;
+
+  if (*speed_last == 0)
+    *speed_last = *speed;
+
+  /* Convert to max type */
+  for (speed_si = 1024; *speed_last / speed_si; speed_si *= 1024)
+    type++;
+
+  speed_si_ = (float) (speed_si / 1024);
+  speed_last_ = ((float) *speed_last) / speed_si_;
+
+  printf("%12.02f %s", speed_last_,
+    type == 1 ? "KiB/s" : type == 2 ? "MiB/s" :
+         type == 3 ? "GiB/s" : type == 4 ? "TiB/s" :
+         type == 5 ? "PiB/s" : type == 6 ? "EiB/s" :
+    type == 7 ? "ZiB/s" : "YiB/s");
+
+  fflush(stdout);
+}
+
+/* This function displays source/dest size files
+   if the progress flag is set. */
+
+void
+progress_bar_print_size(size_t dim_tot, size_t dim_cur)
+{
+  size_t dim_si;
+  float dim_tot_, dim_cur_, dim_si_;
+  int type = 0;
+
+  /* Convert to max type */
+  for (dim_si = 1024; dim_tot / dim_si; dim_si *= 1024)
+    type++;
+
+  dim_si_ = (float) (dim_si / 1024);
+  dim_tot_ = ((float) dim_tot) / dim_si_;
+  dim_cur_ = ((float) dim_cur) / dim_si_;
+
+  printf("%10.02f/%.02f %s", dim_cur_, dim_tot_,
+         type == 1 ? "KiB" : type == 2 ? "MiB" :
+    type == 3 ? "GiB" : type == 4 ? "TiB" :
+    type == 5 ? "PiB" : type == 6 ? "EiB" :
+    type == 7 ? "ZiB" : "YiB");
+
+  fflush(stdout);
+}
+
+/* This function displays ETA copy
+   if the progress flag is set. */
+
+void
+progress_bar_print_eta(size_t dim_tot, size_t dim_cur,
+              size_t speed_last)
+{
+  size_t dim_diff = 0,
+    eta = 0;
+  int sec, min, hour;
+
+  /* Convert in KiB */
+  dim_tot /= 1024;
+  dim_cur /= 1024;
+
+  dim_diff = dim_tot - dim_cur;
+  speed_last /= 1024;
+
+  /* speed_last : 1 sec = dim_diff : eta
+
+     eta = 1 * dim_diff
+           ------------
+       speed_last  */
+
+  eta = dim_diff / speed_last;
+
+  min = eta / 60;
+  sec = eta - (min * 60);
+  hour = min / 60;
+
+  printf("ETA: %02d:%02d:%02d  ", hour, min, sec);
+
+  fflush(stdout);
+}
+
+
+
+
 /* Copy a regular file from SRC_NAME to DST_NAME.
    If the source file contains holes, copies holes and blocks of zeros
    in the source file as holes in the destination file.
@@ -652,6 +883,16 @@
       bool last_write_made_hole = false;
       bool make_holes = false;
 
+      /* Progress bar */
+      int pb_check;
+      size_t dim_tot = 0,
+      dim_cur = 0;
+      /* speed time */
+      time_t time_init;
+      struct tm tm_init;
+      size_t speed = 0,
+      speed_last = 0;
+
       if (S_ISREG (sb.st_mode))
         {
           /* Even with --sparse=always, try to create holes only
@@ -698,6 +939,18 @@
       buf_alloc = xmalloc (buf_size + buf_alignment_slop);
       buf = ptr_align (buf_alloc, buf_alignment);
 
+      if (x->progress)
+      {
+        dim_tot = src_sb->st_size;
+
+        if (! (pb_check = progress_bar_check(src_name, dim_tot)))
+          {
+       time_init = time(NULL);
+            tm_init = *(struct tm *) localtime(&time_init);
+            tm_init.tm_sec += 1;
+          }
+      }
+
       while (true)
         {
           word *wp = NULL;
@@ -713,6 +966,7 @@
               return_val = false;
               goto close_src_and_dst_desc;
             }
+
           if (n_read == 0)
             break;
 
@@ -772,6 +1026,27 @@
                   return_val = false;
                   goto close_src_and_dst_desc;
                 }
+
+              /* if the progress flag is set, it uses a progress bar */
+              if (x->progress && ! pb_check)
+                {
+                  dim_cur += n;
+
+                  /* print progress bar */
+                  progress_bar_print(dim_tot, dim_cur);
+
+                  speed += n;
+
+                  /* print progress bar speed */
+                  progress_bar_print_speed(&tm_init, &speed, &speed_last);
+
+                  /* print progress bar size */
+                  progress_bar_print_size(dim_tot, dim_cur);
+
+                  /* print progress bar ETA */
+                  //progress_bar_print_eta(dim_tot, dim_cur, speed_last);
+                }
+
               last_write_made_hole = false;
 
               /* It is tempting to return early here upon a short read from a
@@ -781,6 +1056,9 @@
             }
         }
 
+      if (x->progress && ! pb_check)
+        putchar('\n');
+
       /* If the file ends with a `hole', we need to do something to record
          the length of the file.  On modern systems, calling ftruncate does
          the job.  On systems without native ftruncate support, we have to
diff -ur /var/tmp/portage/sys-apps/coreutils-8.7/work/coreutils-8.7/src/copy.h coreutils-8.7.hacked/src/copy.h
--- /var/tmp/portage/sys-apps/coreutils-8.7/work/coreutils-8.7/src/copy.h	2010-10-11 21:35:11.000000000 +0400
+++ coreutils-8.7.hacked/src/copy.h	2010-12-22 16:45:09.000000000 +0300
@@ -99,6 +99,9 @@
 {
   enum backup_type backup_type;
 
+  /* If true, Display a progress bar */
+  bool progress;
+
   /* How to handle symlinks in the source.  */
   enum Dereference_symlink dereference;
 
diff -ur /var/tmp/portage/sys-apps/coreutils-8.7/work/coreutils-8.7/src/cp.c coreutils-8.7.hacked/src/cp.c
--- /var/tmp/portage/sys-apps/coreutils-8.7/work/coreutils-8.7/src/cp.c	2010-10-11 21:35:11.000000000 +0400
+++ coreutils-8.7.hacked/src/cp.c	2010-12-22 16:46:38.000000000 +0300
@@ -118,6 +118,7 @@
   {"archive", no_argument, NULL, 'a'},
   {"attributes-only", no_argument, NULL, ATTRIBUTES_ONLY_OPTION},
   {"backup", optional_argument, NULL, 'b'},
+  {"progress", no_argument, NULL, 'B'},
   {"copy-contents", no_argument, NULL, COPY_CONTENTS_OPTION},
   {"dereference", no_argument, NULL, 'L'},
   {"force", no_argument, NULL, 'f'},
@@ -173,6 +174,7 @@
       --backup[=CONTROL]       make a backup of each existing destination file\n\
   -b                           like --backup but does not accept an argument\n\
       --copy-contents          copy contents of special files when recursive\n\
+  -B, --progress               show a progress bar\n\
   -d                           same as --no-dereference --preserve=links\n\
 "), stdout);
       fputs (_("\
@@ -763,6 +765,7 @@
 static void
 cp_option_init (struct cp_options *x)
 {
+  x->progress = false;
   cp_options_default (x);
   x->copy_as_regular = true;
   x->dereference = DEREF_UNDEFINED;
@@ -927,7 +930,7 @@
      we'll actually use backup_suffix_string.  */
   backup_suffix_string = getenv ("SIMPLE_BACKUP_SUFFIX");
 
-  while ((c = getopt_long (argc, argv, "abdfHilLnprst:uvxPRS:T",
+  while ((c = getopt_long (argc, argv, "abBdfHilLnprst:uvxPRS:T",
                            long_opts, NULL))
          != -1)
     {
@@ -970,6 +973,10 @@
           x.data_copy_required = false;
           break;
 
+        case 'B':
+          x.progress = true;
+          break;
+
         case COPY_CONTENTS_OPTION:
           copy_contents = true;
           break;
